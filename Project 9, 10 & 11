import java.text.DecimalFormat;
/**
* Stores ticket data and provides methods to access the data.
*/

public abstract class AirTicket {
   protected String flightNum = "";
   protected Itinerary tripData;
   protected double baseFare = 0.0;
   protected double fareAdjustment = 0.0;
   
   /**
   *Constructor.
   *@param flightNumIn for flightNum
   *@param tripDataIn for tripData;
   *@param baseFareIn for  baseFare;
   *@param fareAdjustmentIn for fareAdjustment
   */
   public AirTicket(String flightNumIn, Itinerary tripDataIn, double baseFareIn,
      double fareAdjustmentIn) {
      flightNum = flightNumIn;
      tripData = tripDataIn;
      baseFare = baseFareIn;
      fareAdjustment = fareAdjustmentIn;
   }
   
   /**
   *@return flightNumber
   */
   public String getFlightNum() {
      return flightNum;
   }
   
   /**
   *@return baseFare
   */
   public double getBaseFare() {
      return baseFare;
   }
   
   /**
   *@return getFareAdjustment
   */
   public double getFareAdjustmentFactor() {
      return fareAdjustment;
   }
   
   /**
   *@return information in AirTicket object.
   */
   public String toString() {
      DecimalFormat formatDecimal = new DecimalFormat("$#,##0.00");
      return getClass() + "Flight: " + flightNum + "\nBase Fare: $" 
         + formatDecimal.format(baseFare)
         + " Fare Adjustment Factor: " 
         + formatDecimal.format(fareAdjustment);
   }
   
   /**
   *@return totalFare
   */
   public abstract double totalFare();
   
   /**
   *@return int
   */
   public abstract int totalAwardMiles();
   
   /**
   *@param AirTicket
   *@return results of comparing tickets.
   *@param airTicketCompare - used. 
   */
   
   public int compareTo(AirTicket airTicketCompare) {
      return this.flightNum.toLowerCase().
         compareTo(airTicketCompare.getFlightNum().toLowerCase());  
   }
   
   /**
   *@return value for the trip.
   */
   public Itinerary getItinerary() {
      return tripData;
   }
   
}
//
//
//
//
//
import java.io.FileNotFoundException;
/**
*contains the main method.
*/
public class AirTicketApp {
  
  /**	
    *@param args for command line argument.	
    *@throws FileNotFoundException when reading	  	
    */ 
   public static void main(String[] args) {
   
      if (args.length > 0) {
         System.out.println("File name expected as command line"
            +  " argument.\nProgram ending.");
      }
      else {
      
         String fileName = args[0];
         try {
         
            AirTicketProcessor tickets = new AirTicketProcessor();
         
            tickets.readAirTicketFile(fileName);
         
            System.out.print(tickets.generateReport());
            System.out.print(tickets.generateReportByFlightNum());
            System.out.print(tickets.generateReportByItinerary());
         }
         
         catch (FileNotFoundException e) {
            System.out.println("*** File not found."
               + "/nProgram ending.");
         }
      }
   }
} 
//
//
//
//
//
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Arrays;
/**
*provides methods for reading in the data file and
*generating reports.
*/
public class AirTicketProcessor {
   private AirTicket[] tickets;
   private String[] invalid;

/**
*Constructor.
*/
   public AirTicketProcessor() {
      tickets = new AirTicket[0]; 
      invalid = new String[0];
   }
   
   /**
* Method readAirTicketFile reads in data from the file.
*@param fileName specifies the file to be read.
*@throws FileNotFoundException - used. 
*/
   public void readAirTicketFile(String fileName) throws FileNotFoundException {
   
            
      Scanner sc = new Scanner(new File(fileName));
   
      while (sc.hasNext()) {
         String line = sc.nextLine();
         Scanner lScan = new Scanner(line);
         lScan.useDelimiter(",");
         String type = lScan.next();
         String flight = lScan.next();
         Itinerary trip = new Itinerary(lScan.next(), 
                   lScan.next(), lScan.next(), 
                   lScan.next(), lScan.nextInt());
      
      
      
         char code = type.toUpperCase().charAt(0);
         try{
            switch (code) {
            
               case 'N':
               //N - NonRefundable
                  addAirTicket(new NonRefundable(flight, trip, 
                     lScan.nextDouble(), lScan.nextDouble(), 
                     lScan.nextDouble()));
                  break;
                
                                 
            
               case 'B':
               //B - Business Class   
                  addAirTicket(new Business(flight, trip, 
                     lScan.nextDouble(), lScan.nextDouble(), 
                     lScan.nextDouble(), lScan.nextDouble()));
                  break;
               
               case 'E':
               //E - Economy Class
                  addAirTicket(new Economy(flight, trip, 
                     lScan.nextDouble(), lScan.nextDouble()));
                  break;
                
               case 'F':
               //F - First (Elite) Class
                  addAirTicket(new Elite(flight, trip, 
                     lScan.nextDouble(), lScan.nextDouble(), 
                     lScan.nextDouble(), lScan.nextDouble(),
                     lScan.nextDouble()));
                  break;
            
               default:
                  try {
                     throw new InvalidCategoryException(type);
                  }
                  catch (InvalidCategoryException e) {
                     addInvalidRecord(e + " in: " + e.toString());
                  }
                  break;
                  
                      
            }
            
         }
         catch (NumberFormatException e) {
            addInvalidRecord(e + " in: " + e.toString());
         }
                      
      }
   
      sc.close();
      
   }
  
  /**
  *@param ticketsIn - used.
  */ 
   public void addAirTicket(AirTicket ticketsIn) {
      tickets = Arrays.copyOf(tickets, tickets.length + 1);
      tickets[tickets.length - 1] = ticketsIn;
     
   }
   
   /**
   *@param invalidIn - used.
   */
   public void addInvalidRecord(String invalidIn) {
      invalid = Arrays.copyOf(invalid, invalid.length + 1);
      invalid[invalid.length - 1] = invalidIn;
     
   }

   
   /**
* Method generateReport generates and prints a report of the tickets.
*@return String.
*/
   public String generateReport() {
      String result = "\n----------------------------\n"
         + "Air Ticket Report\n"
         + "----------------------------\n";
   
      for (AirTicket tix : tickets) {
         System.out.println(tix + "\n");
      }
      
      return result;  
   
   }

 /**
*Generates and prints a report 
*of the tickets in order of the respective flight numbers.
*@return String
*/
   public String generateReportByFlightNum() {
      Arrays.sort(tickets);
      String result = "--------------------------------------\n"
         + "Air Ticket Report (by Flight Number)\n"
         + "--------------------------------------\n";
        
      for (AirTicket tix : tickets) {
         result += tix + "\n";
      }
      
      return result;
   }

        /**
* Method generateReportByItinerary generates and prints a report 
* of the tickets in order of the respective Itineraries.
*@return String.
*/
   public String generateReportByItinerary() {
      Arrays.sort(tickets, new ItineraryComparator());
      String result = "----------------------------\n"
         + "Air Ticket Report (by Itinerary)\n"
         + "----------------------------\n";
                
      for (AirTicket tix : tickets) {
         System.out.println(tix + "\n");
      }
   
      return result;
   
   }
   
   /**
   *@return the value of the field for the array of type String.
   */
   public AirTicket[] getTickets() {
      return tickets;
   }
   
   /**
   *@return invalid
   */
   public String[] getInvalidInput() {
      return invalid;
   }
   
   /**
   *@return String
   */
   public String generateReportForInvalidInput() {
      Arrays.sort(tickets);
      String result = "--------------------------------------\n"
         + "Air Ticket Report for Invalid Input\n"
         + "--------------------------------------\n";
        
      for (AirTicket tix : tickets) {
         result += tix + "\n";
      }
      
      return result;
   }

}
//
//
//
//
//
import java.text.DecimalFormat;
/**
*Class Business from AirTicket.
*/
public class Business extends AirTicket {
   protected double foodAndBeverages;
   protected double entertainment;
   
   /**
   *instance variables for food&beverages of type double and entertainment.
   */
   public static final double BUSINESSAWARDMILES = 2.0;

/**
*Constructor.
**@param flightNumIn for flightNum
*@param tripDataIn for tripData
*@param baseFareIn for baseFare
*@param fareAdjustmentIn for fareAdjustment
*@param flightNumIn for flightNum
*@param foodAndBeveragesIn for foodAndBeverages
*@param entertainmentIn for entertainment
*/

   public Business(String flightNumIn, Itinerary tripDataIn, double baseFareIn,
      double fareAdjustmentIn, double foodAndBeveragesIn, 
      double entertainmentIn) {
      super(flightNumIn, tripDataIn, baseFareIn, fareAdjustmentIn);
      foodAndBeverages = foodAndBeveragesIn;
      entertainment = entertainmentIn; 
   }
   
   /**
   *@return totalFare
   */
   public double totalFare() {
      return (baseFare * fareAdjustment) + foodAndBeverages 
         + entertainment;
   }
   
 /**
   *@return actual miles from itinerary.
   */
   public int totalAwardMiles() {
      int awardMiles = (int) (tripData.getMiles() 
         * (float) (BUSINESSAWARDMILES));
      return awardMiles;
   }
   
   /**
   *@return String.
   */
   public String toString() {
      DecimalFormat df = new DecimalFormat("$#,##0.00");
      return super.toString() 
         + "\n   Includes Food/Beverage: "
         + df.format(foodAndBeverages) + " Entertainment: "
         + df.format(entertainment);
   }


}
//
//
//
//
//
import java.text.DecimalFormat;
/**
*Derive the class Economy from AirTicket.
*/
public class Economy extends AirTicket {

/**
*static final variable for economy award miles factor of type double.
*/
   public static final double ECONOMYAWARDMILES = 1.5;

/**
*Constructor.
*@param flightNumIn for flightNum
*@param tripDataIn for tripData
*@param baseFareIn for baseFare
*@param fareAdjustmentIn for fareAdjustment
*/

   public Economy(String flightNumIn, Itinerary tripDataIn, double baseFareIn,
      double fareAdjustmentIn) {
      super(flightNumIn, tripDataIn, baseFareIn, fareAdjustmentIn);
   }
   /**
   *@return totalFare
   */
   public double totalFare() {
      return baseFare * fareAdjustment;
   }
   
   /**
   *@return actual miles from itinerary.
   */
   public int totalAwardMiles() {
      int awardMiles = (int) (tripData.getMiles() 
         * (float) (ECONOMYAWARDMILES));
      return awardMiles;
   }
   
   /**
   *@return String.
   */
   public String toString() {
      DecimalFormat df = new DecimalFormat("$#,##0.00");
      return super.toString() 
         + "\n   Includes Award Miles Factor: " + ECONOMYAWARDMILES;
   }

}
//
//
//
//
//
import java.text.DecimalFormat;
/**
*class Elite from derived from class Business.
*/

public class Elite extends Business {
   private double communicationServices;
   
   /**
*Constructor.
**@param flightNumIn for flightNum
*@param tripDataIn for tripData
*@param baseFareIn for baseFare
*@param fareAdjustmentIn for fareAdjustment
*@param foodAndBeveragesIn for foodAndBeverages
*@param entertainmentIn for entertainment
*@param communicationServicesIn for communicationServices
*@param flightNumIn for flightNum
*/

   public Elite(String flightNumIn, Itinerary tripDataIn, double baseFareIn,
      double fareAdjustmentIn, double foodAndBeveragesIn, 
      double entertainmentIn, double communicationServicesIn) {
      super(flightNumIn, tripDataIn, baseFareIn, fareAdjustmentIn,
         foodAndBeveragesIn, entertainmentIn);
      communicationServices = communicationServicesIn;
      
   }
   
   /**
   *@return totalFare
   */
   public double totalFare() {
      return super.totalFare() + communicationServices;
   }
   
   /**
   *@return super.totalAwardMiles()
   */
   public int totalAwardMiles() {
      return super.totalAwardMiles();
   }
   
   /**
   *@return String
   */
   public String toString() {
      DecimalFormat df = new DecimalFormat("$#,##0.00");
      return super.toString() 
         + "   Includes: Comm Services: "
         + df.format(communicationServices);
   
   }
}
//
//
//
//
//
/**
*Extends the Exception class.
*
*/
public class InvalidCategoryException extends Exception {
   /**
    *Defines exception and String.
    *
    *@param category is used.
    */
   public InvalidCategoryException(String category) {
      super("For category: " + "\"" + category + "\"");
   }
}
//
//
//
//
//
 /** 
 *  represents an inventory item in a store .
 *
 * Project 09
 * @author Nnamdi Ikenna-Obi - Comp 1210 - section 001
 * @version November 04, 2021.
 */
 
public class Itinerary {
   
   private String fromAirport = "";
   private String toAirport = "";
   private String departure = "";
   private String arrival = "";
   private int miles;
   
   /**
   *@param fromAirportIn for fromAirport
   *@param toAirportIn for toAirport
   *@param departureIn for departure
   *@param arrivalIn for arrival
   *@param milesIn for miles
   */
   public Itinerary(String fromAirportIn, String toAirportIn, 
      String departureIn, String arrivalIn, int milesIn) {
      fromAirport = fromAirportIn;
      toAirport = toAirportIn;
      departure = departureIn;
      arrival = arrivalIn;
      miles = milesIn;
      
   }
   
   /**
   *@return fromAirport
   */
   public String getFromAirport() {
      return fromAirport;
   }
   
   /**
   *@return departure
   */
   public String getDepDateTime() {
      return departure;
   } 
   
   /**
   *@return miles
   */
   public int getMiles() {
      return miles;
   }
   
   /**
   *@return itinerary object
   */
   public String toString() {
      return fromAirport + "-" + toAirport + "(" + departure + " - " 
         + arrival + ")" + miles + " miles";
   }
}
//
//
//
//
//
import java.util.Comparator;
/**
*Implements the Comparator interface
*for AirTicket objects.
*/   
public class ItineraryComparator implements Comparator<AirTicket> {
/**
* @param t1 - used.
* @param t2 - used. 
* @return specicies the sorting result.
*/
   public int compare(AirTicket t1, AirTicket t2) {
   
      return t1.getItinerary().toString()
         .compareToIgnoreCase(t2.getItinerary().toString());
   
   }

}
//
//
//
//
//
import java.text.DecimalFormat;
/**
* Derives the class NonRefundable from AirTicket.
*/

public class NonRefundable extends AirTicket {
   private double discountFactor;

/**
*Constructor.
*@param flightNumIn for flightNum
*@param tripDataIn for tripData
*@param baseFareIn for baseFare
*@param fareAdjustmentIn for fareAdjustment
*@param discountFactorIn for discountFactor
*/

   public NonRefundable(String flightNumIn, Itinerary tripDataIn, 
      double baseFareIn, double fareAdjustmentIn, 
      double discountFactorIn) {
      super(flightNumIn, tripDataIn, baseFareIn, fareAdjustmentIn);
      discountFactor = discountFactorIn;
   } 

/**
*@return discountFactor
*/

   public double getDiscountFactor() {
      return discountFactor;
   }
   
   /**
   *@return totalFare
   */
   public double totalFare() {
      return baseFare * fareAdjustment * discountFactor;
   }
   
   /**
   *@return an int equal to the actual miles from the itinerary 
   */
   public int totalAwardMiles() {
      return tripData.getMiles();
   }
   
   /**
   *@return a String containing the information in the NonRefundable object.
   */
   public String toString() {
      DecimalFormat formatDecimal =  new DecimalFormat("$#,##0.00");
      return super.toString() 
         + "\nTotal Fare: " + formatDecimal.format(totalFare()) 
         + " (class NonRefundable)"
         + "\n   Includes DiscountFactor: " + discountFactor;
   }

}
//
//
//
//
//
import org.junit.Assert;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;


public class NonRefundableTest {

   Itinerary trip = new Itinerary("ATL", "LGA", "2021/11/21 1400", "2021/11/21 1640", 800);
   // instantiate the NonRefundable object
   NonRefundable nr = new NonRefundable("DL 1860", trip, 450, 0.45, 0.90);

   @Test
   void testNonRefundable() {
      String expectedFlightNum = "DL 1860";
      double expectedBaseFare = 450, expectedFareAdjustmentFactor = 0.45, expectedDiscountFactor = 0.90;
      assertEquals(expectedFlightNum, nr.getFlightNum());
      assertEquals(expectedBaseFare, nr.getBaseFare(), 0);
      assertEquals(expectedFareAdjustmentFactor, nr.getFareAdjustmentFactor(), 0);
      assertEquals(expectedDiscountFactor, nr.getDiscountFactor(), 0);
   }

   @Test
   void testTotalFare() {
      double expectedTotalFare = 182.25;
      assertEquals(expectedTotalFare, nr.totalFare(), 0);
   }

   @Test
   void testTotalAwardMiles() {
      int expectedAwardedMiles = 800;
      assertEquals(expectedAwardedMiles, nr.totalAwardMiles());
   }

   @Test
   void testGetDiscountFactor() {
      double expectedDiscountFactor = 0.90;
      assertEquals(expectedDiscountFactor, nr.getDiscountFactor(), 0);
   }

   @Test
   void testToString() {
      String expectedString = "class NonRefundable\n" + "Flight: DL 1860\n"
                 + "ATL-LGA (2021/11/21 1400 - 2021/11/21 1640) 800 miles (800 award miles)\n"
                 + "Base Fare: $450.00 Fare Adjustment Factor: 0.45\n" + "Total Fare: $182.25 (class NonRefundable)\n"
                 + "   Includes DiscountFactor: 0.9";
   
      assertEquals(expectedString, nr.toString());
   }

}



